// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/solarPanelDataRepositoryInterface.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/loukaspe/solar-panel-data-crud/internal/core/domain"
)

// MockSolarPanelDataRepositoryInterface is a mock of SolarPanelDataRepositoryInterface interface.
type MockSolarPanelDataRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSolarPanelDataRepositoryInterfaceMockRecorder
}

// MockSolarPanelDataRepositoryInterfaceMockRecorder is the mock recorder for MockSolarPanelDataRepositoryInterface.
type MockSolarPanelDataRepositoryInterfaceMockRecorder struct {
	mock *MockSolarPanelDataRepositoryInterface
}

// NewMockSolarPanelDataRepositoryInterface creates a new mock instance.
func NewMockSolarPanelDataRepositoryInterface(ctrl *gomock.Controller) *MockSolarPanelDataRepositoryInterface {
	mock := &MockSolarPanelDataRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockSolarPanelDataRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSolarPanelDataRepositoryInterface) EXPECT() *MockSolarPanelDataRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateSolarPanelData mocks base method.
func (m *MockSolarPanelDataRepositoryInterface) CreateSolarPanelData(arg0 *domain.SolarPanelData) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSolarPanelData", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSolarPanelData indicates an expected call of CreateSolarPanelData.
func (mr *MockSolarPanelDataRepositoryInterfaceMockRecorder) CreateSolarPanelData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSolarPanelData", reflect.TypeOf((*MockSolarPanelDataRepositoryInterface)(nil).CreateSolarPanelData), arg0)
}

// DeleteSolarPanelData mocks base method.
func (m *MockSolarPanelDataRepositoryInterface) DeleteSolarPanelData(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSolarPanelData", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSolarPanelData indicates an expected call of DeleteSolarPanelData.
func (mr *MockSolarPanelDataRepositoryInterfaceMockRecorder) DeleteSolarPanelData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSolarPanelData", reflect.TypeOf((*MockSolarPanelDataRepositoryInterface)(nil).DeleteSolarPanelData), arg0)
}

// GetSolarPanelData mocks base method.
func (m *MockSolarPanelDataRepositoryInterface) GetSolarPanelData(uuid string) (*domain.SolarPanelData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolarPanelData", uuid)
	ret0, _ := ret[0].(*domain.SolarPanelData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolarPanelData indicates an expected call of GetSolarPanelData.
func (mr *MockSolarPanelDataRepositoryInterfaceMockRecorder) GetSolarPanelData(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolarPanelData", reflect.TypeOf((*MockSolarPanelDataRepositoryInterface)(nil).GetSolarPanelData), uuid)
}

// UpdateSolarPanelData mocks base method.
func (m *MockSolarPanelDataRepositoryInterface) UpdateSolarPanelData(arg0 string, arg1 *domain.SolarPanelData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSolarPanelData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSolarPanelData indicates an expected call of UpdateSolarPanelData.
func (mr *MockSolarPanelDataRepositoryInterfaceMockRecorder) UpdateSolarPanelData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSolarPanelData", reflect.TypeOf((*MockSolarPanelDataRepositoryInterface)(nil).UpdateSolarPanelData), arg0, arg1)
}
